@using CogsMinimizer.Shared
@model CogsMinimizer.Models.SubscriptionAnalyzeViewModel

@{
    ViewBag.Title = "Analyze Subscription";
}

@Styles.Render("~/Content/css")
<link href="~/Content/bootstrap-sortable.css" rel="stylesheet" />
<link href="~/Content/main.css" rel="stylesheet" />

<style>
    .btn-round {
        border-radius: 12px;
        border: none;
    }

    .btn {
        margin: 3px;
    }

    .table {
        table-layout: fixed;
    }
</style>

@section Scripts
{
 <!-- all dependency scripts will be loaded here -->   
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
    <!-- loading remaining scripts -->
<script src="~/Scripts/colResizable-1.6.js"></script>
<script src="~/Scripts/bootstrap-sortable.js"></script>

<script>

    var initialBtnCursor;
    var initialBodyCursor;

        var nameColumn = 0;
        var descriptionColumn = 3;
        var ownerColumn = 5;
        var expirationDateColumn = 8;
        var statusColumn = 9;

        function SetCursor(bodyCursor, btnCursor) {
        $('body').css('cursor', bodyCursor); 
        $('.btn').css('cursor', btnCursor);
    }

    $(document).ready(function () {

        initialBodyCursor = $('body').first().css('cursor');
        initialBtnCursor = $('.btn').first().css('cursor');

        // In addition to calling controller action buttons click will cause setting cursor to wait while being over body and buttons
        $('.wait-crs').on('click', function () { SetCursor('wait', 'wait'); });

        $('input:radio').change(function () {
            FilterResources(this);
        });

        $("[data-toggle='tooltip']").tooltip({trigger: 'hover'});

    });

     $("#resourcesTable").colResizable({
            liveDrag: true,
            gripInnerHtml: "<div class='grip'></div>",
            draggingClass: "dragging",
            resizeMode: 'fit'
        });

    function GetBool(colNum, value) {
        var input = $(value.elm).find("td").eq(colNum).find("input")[0];
        if (input.checked) {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    function GetDate(colNum, value)
    {
        var dateAsString = $(value.elm).find("td").eq(colNum).html(); 
        var dateParts = dateAsString.split('/');
        var date = new Date(dateParts[2], dateParts[0], dateParts[1]);
        return date;
    }
        
    function SortResources(th) {

        if ($('#resourcesTable tbody tr').length == 0)
        {
            return;
        }

        var order = "asc";
        if ($(th).hasClass("down")) {
            order = "desc";
        }

        var colNum = $(th).index();
        var selector = "td:nth-child(" + (colNum + 1) + ")";

        var sortKind = "Text";
        if ($(th).attr("data-defaultsign") == "month") {
            sortKind = "Date";
        }
        else if ($(th).attr("data-defaultsign") == "bool") {
            sortKind = "bool";
        }

        if (sortKind == "Date") {
            tinysort($('#resourcesTable tbody tr'), {
                order: order, selector: selector, sortFunction: function (a, b) {
                    return GetDate(colNum, a) - GetDate(colNum, b);
                }
            });
        }
        else if (sortKind == "bool") {
            tinysort($('#resourcesTable tbody tr'), {
                order: order, selector: selector, sortFunction: function (a, b) {
                    return GetBool(colNum, a) - GetBool(colNum, b);
                }
            });
        }
        else {
            tinysort($('#resourcesTable tbody tr'), { order: order, selector: selector });
        }
    }

    function RedrawResourceTable() {
        if ($('#allResourcesRadio').is(":checked"))
        {
            FilterResources($('#allResourcesRadio'));
        }
        else if ($('#yourResourcesRadio').is(":checked"))
        {
            FilterResources($('#yourResourcesRadio'));
        }
        else if ($('#unclaimedResourcesRadio').is(":checked"))
        {
            FilterResources($('#unclaimedResourcesRadio'));
        }
    }

    function FilterResources(radioBtn) {
        if ($(radioBtn).attr('id') == 'allResourcesRadio')
        {
            $('#resourcesTable').find('tr').each(function () { $(this).show(); });
        }
        else if ($(radioBtn).attr('id') == 'yourResourcesRadio')
        {
            var currentUser = $.trim(@Html.Raw(Json.Encode(ViewData["UserId"])));
            $('#resourcesTable').find('tr').each(function ()
            {
                // skip table header
                if ($(this).find('th').length != 0) {
                    return;
                }

                var resourceOwner = $.trim($(this).find('td').eq(3).html());
                if (resourceOwner == currentUser)
                {
                    $(this).show();
                }
                else
                {
                    $(this).hide();
                }
            });
        }
        else if ($(radioBtn).attr('id') == 'unclaimedResourcesRadio')
        {
            $('#resourcesTable tr').each(function ()
            {
                // skip table header
                if ($(this).find('th').length != 0)
                {
                    return;
                }

                var confirmedUser = $(this).find('td #item_ConfirmedOwner').is(':checked');
                if (confirmedUser )
                {
                    $(this).hide();
                }
                else
                {
                    $(this).show();
                }
            });
        }
}

        function OnResetResources() {
            SetCursor('wait', 'wait');
            $.ajax({
                url: "/Subscription/ResetResources",
                type: "POST",
                dataType: "json",
                data: JSON.stringify({
                    SubscriptionId: '@Model.SubscriptionData.Id'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    for (var resNum = 0; resNum < data.length; resNum++) {
                        var resource = data[resNum];
                        // let's find resource raw in resource table in order to update appropriate values
                        var rowSelector = "#resourcesTable tr[data-resource-id='" + resource.Id + "']";
                        var resourceRow = $(rowSelector).first();
                        if (resourceRow != null) {
                            if (resource.ConfirmedOwner) {
                                $(resourceRow).find('#item_ConfirmedOwner').prop('checked', 'checked');
                            }
                            else {
                                $(resourceRow).find('#item_ConfirmedOwner').prop('checked', '');
                            }

                            $(resourceRow).find('td').eq(ownerColumn).html(resource.Owner);
                            $(resourceRow).find('td').eq(ownerColumn).attr("title", resource.Owner);

                            $(resourceRow).find('td').eq(expirationDateColumn).html(resource.ExpirationDate);
                            $(resourceRow).find('td').eq(expirationDateColumn).attr("title", resource.ExpirationDate);

                            $(resourceRow).find('td').eq(statusColumn).html(resource.Status);
                            $(resourceRow).find('td').eq(statusColumn).attr("title", resource.Status);
                        }
                    }

                    RedrawResourceTable();
                    SetCursor(initialBodyCursor, initialBtnCursor);
                }
            });
        }

            function OnEditDescription(editBtn, resID, subscrID) {
            $(editBtn).tooltip('hide');

            var selectedRow = $(editBtn).parents("tr");
            var resourceId = $(selectedRow).attr("data-resource-id");
            var resourceName = $(selectedRow).find("td").eq(nameColumn).find("a").text();
            // multi line value is padded by spaces at beginning/ending. let's trim it
            var resourceDescription = $.trim($(selectedRow).find("td").eq(descriptionColumn).html());


            $('#resourceId').html(resourceId);
            $('#resourceName').html(resourceName);
            $('#resourceDescription').val(resourceDescription);
            $('#descriptionDialog').modal('show');
        }

        function OnSaveDescription()
        {
            SetCursor('wait', 'wait');

            var resourceId = $('#resourceId').html();
            var resourceDescription = $('#resourceDescription').val();
            $.ajax({
                url: "/Subscription/SaveResourceDescription",
                type: "POST",
                dataType: "json",
                data: JSON.stringify({
                    SubscriptionId: '@Model.SubscriptionData.Id',
                    ResourceId: resourceId,
                    Description: resourceDescription
                }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    // let's find resource raw in resource table in order to update appropriate values
                    var rowSelector = "#resourcesTable tr[data-resource-id='" + resourceId + "']";
                    var resourceRow = $(rowSelector).first();
                    if (resourceRow != null) {
                        $(resourceRow).find('td').eq(descriptionColumn).html(data.Description);
                        $(resourceRow).find('td').eq(descriptionColumn).attr("title", data.Description);
                    }

                    $('#descriptionDialog').modal('hide');
                    SetCursor(initialBodyCursor, initialBtnCursor);
                }
            });
            }

    function OnResetResource(resetBtn, resID, subscrID) {
        SetCursor('wait', 'wait');
        $(resetBtn).tooltip('hide');
        // meanwhile somehow previous row button is disabled. so we allow repetitive operations
        //        $(resetBtn).prop('disabled', 'disabled');
        var selectedRow = $(resetBtn).parents("tr");
        $.ajax({
            url: "/Subscription/ResetResource",
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                ResourceId: resID,
                SubscriptionId: subscrID
            }),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                // Let's update expiration date, validity status, resource owner
                // Model at server is updated at controller method and will be used for table complete updating at refresh table

                if (data.ConfirmedOwner) {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', 'checked');
                }
                else {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', '');
                }

                    $(selectedRow).find('td').eq(ownerColumn).html(data.Owner);
                    $(selectedRow).find('td').eq(ownerColumn).attr("title", data.Owner);
                    $(selectedRow).find('td').eq(expirationDateColumn).html(data.ExpirationDate);
                    $(selectedRow).find('td').eq(expirationDateColumn).attr("title", data.ExpirationDate);
                    $(selectedRow).find('td').eq(statusColumn).html(data.Status);
                    $(selectedRow).find('td').eq(statusColumn).attr("title", data.Status);
                    RedrawResourceTable();
                SetCursor(initialBodyCursor, initialBtnCursor);
            }
        });
    }

    function OnReserveResource(reserveBtn, resID, subscrID) {
        $(reserveBtn).tooltip('hide');
        // meanwhile somehow previous row button is disabled. so we allow repetitive operations
        //        $(reserveBtn).prop('disabled', 'disabled');
        SetCursor('wait', 'wait');
        var selectedRow = $(reserveBtn).parents("tr");
        $.ajax({
            url: "/Subscription/ReserveResource",
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                ResourceId: resID,
                SubscriptionId: subscrID
            }),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                // Let's update expiration date, validity status, resource owner
                // Model at server is updated at controller method and will be used for table complete updating at refresh table

                if (data.ConfirmedOwner) {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', 'checked');
                }
                else
                {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', '');
                }

                $(selectedRow).find('td').eq(ownerColumn).html(data.Owner);
                $(selectedRow).find('td').eq(ownerColumn).attr("title", data.Owner);
                $(selectedRow).find('td').eq(expirationDateColumn).html(data.ExpirationDate);
                $(selectedRow).find('td').eq(expirationDateColumn).attr("title", data.ExpirationDate);
                $(selectedRow).find('td').eq(statusColumn).html(data.Status);
                $(selectedRow).find('td').eq(statusColumn).attr("title", data.Status);

                RedrawResourceTable();
                SetCursor(initialBodyCursor, initialBtnCursor);
            }
        });
    }

    function OnExtendResource(extendBtn, resID, subscrID) {
        $(extendBtn).tooltip('hide');
// meanwhile somehow previous row button is disabled. so we allow repetitive operations
//        $(extendBtn).prop('disabled', 'disabled');
        SetCursor('wait', 'wait');
        var selectedRow = $(extendBtn).parents("tr");
        $.ajax({
            url: "/Subscription/ExtendResource",
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                ResourceId: resID,
                SubscriptionId: subscrID
            }),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                // Let's update expiration date, validity status, resource owner
                // Model at server is updated at controller method and will be used for table complete updating at refresh table

                if (data.ConfirmedOwner) {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', 'checked');
                }
                else {
                    $(selectedRow).find('#item_ConfirmedOwner').prop('checked', '');
                }

                $(selectedRow).find('td').eq(ownerColumn).html(data.Owner);
                $(selectedRow).find('td').eq(ownerColumn).attr("title", data.Owner);
                $(selectedRow).find('td').eq(expirationDateColumn).html(data.ExpirationDate);
                $(selectedRow).find('td').eq(expirationDateColumn).attr("title", data.ExpirationDate);
                $(selectedRow).find('td').eq(statusColumn).html(data.Status);
                $(selectedRow).find('td').eq(statusColumn).attr("title", data.Status);

                RedrawResourceTable();

                SetCursor(initialBodyCursor, initialBtnCursor);
            }
        });
    }
</script>
}

<h2>Subscription Resources</h2>
<h4>Subscription name: @Model.SubscriptionData.DisplayName</h4>
<h4>Subscription id: @Model.SubscriptionData.Id</h4>

<br />
<table>
    <tr>
        <td style="padding-left : 5px">
<!--
@Html.ActionLink("Extend Expired", "ExtendExpired",
    new {SubscriptionId = Model.SubscriptionData.Id},
    new {@class = "btn btn-info wait-crs"})
    <br/>
-->
            @Html.ActionLink("Settings", "GetSettings",
                        new
                        {
                            Id = Model.SubscriptionData.Id,
                            OrganizationId = Model.SubscriptionData.OrganizationId,
                            DisplayName = Model.SubscriptionData.DisplayName,
                            ServicePrincipalObjectId = ""
                        },
                        new { @class = "btn btn-warning btn-round wait-crs" })
            <br />

        </td>
        </tr>
    <tr>
        <td style="padding-left : 5px">
        @if (Model.SubscriptionData.ConnectedBy == User.Identity.Name)
            {
                <button class="btn btn-warning btn-round wait-crs" onclick="OnResetResources()">Reset resources</button>
                <br />
            }
        </td>
    </tr>
    <tr>
        <td style="padding-left : 5px">
            @Html.RadioButton("resource filter", "All resources", true, new { id = "allResourcesRadio" }) All resources
        </td>
        </tr>
    <tr>
            <td style="padding-left : 5px">
            @Html.RadioButton("resource filter", "Your resources", false, new { id = "yourResourcesRadio" }) Your resources
        </td>
        </tr>
        <tr>
     <td style="padding-left : 5px">
            @Html.RadioButton("resource filter", "Unclaimed resources", false, new { id = "unclaimedResourcesRadio" })  Unclaimed resources
        </td>
       </tr>
</table>
<br/>
    <table class="table table-hover table-bordered table-striped table-condensed sortable resizable" id="resourcesTable">
        <thead>
            <tr>
            <th width="17%" id="nameColumn" data-defaultsign="AZ" onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().Name)
                </th>

                <th width="10%" data-defaultsign="AZ"  onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().Type)
                </th>
            <th width="7%" data-defaultsign="AZ" onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().ResourceGroup)
                </th>
            <th width="4%" data-defaultsign="AZ" onclick="SortResources(this)">
                @Html.DisplayNameFor(model => model.Resources.First().Description)
            </th>
                <th width="5%" data-defaultsign="disabled">
                </th>
                <th width="10%" data-defaultsign="AZ"  onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().Owner)
                </th>
                <th width="6%" id="confirmedOwnerColumn" data-defaultsign="bool" onclick="SortResources(this)">
                    Claimed
                </th>
                <th width="7%" data-defaultsign="month"  onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().FirstFoundDate)
                </th>
                <th width="7%" data-defaultsign="month"  onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().ExpirationDate)
                </th>
                <th width="7%" data-defaultsign="AZ" onclick="SortResources(this)">
                    @Html.DisplayNameFor(model => model.Resources.First().Status)
                </th>
                <th width="20%" data-defaultsort="disabled">
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Resources)
            {
                string rowClass = item.Expired ? "alert alert - warning" : null;
            <tr class="@rowClass" data-resource-id="@item.Id">
                    <td title="@item.AzureResourceIdentifier" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.Raw(HTMLUtilities.CreateAzureResourceAnchor(item.Name, item.AzureResourceIdentifier))
                    </td>
                    <td title="@item.Type" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.Type)
                    </td>
                    <td title="@item.ResourceGroup" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.ResourceGroup)
                    </td>
                <td title="@item.Description" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap" align="center">
                    <button class="btn btn-info btn-xs" data-toggle="tooltip" title="Edit resource description"
                            onclick="OnEditDescription(this, '@item.Id', '@item.SubscriptionId')">
                        Edit
                    </button>
                </td>
                    <td title="@item.Owner" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.Owner)
                    </td>
                    <td style="text-align:center">
                        @Html.CheckBoxFor(modelItem => item.ConfirmedOwner, new { disabled = "disabled" })
                    </td>
                    <td title="@item.FirstFoundDate" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.FirstFoundDate)
                    </td>
                    <td title="@item.ExpirationDate" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.ExpirationDate)
                    </td>
                    <td title="@item.Status" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap">
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        <button class="btn btn-info btn-xs" onclick="OnExtendResource(this, '@item.Id', '@item.SubscriptionId')"
                                data-toggle = "tooltip", title = "Extend expiration date by a short period of time. See subscription settings.">Extend</button>
                        <button class="btn btn-success btn-xs" onclick="OnReserveResource(this, '@item.Id', '@item.SubscriptionId')"
                                data-toggle = "tooltip", title = "Extend expiration date by a long period of time. See subscription settings.">Reserve</button>
                        @if (Model.SubscriptionData.ConnectedBy == User.Identity.Name)
                        {
                            <button class="btn btn-default btn-xs" onclick="OnResetResource(this, '@item.Id', '@item.SubscriptionId')"
                                    data-toggle = "tooltip", title = "Reset expiration date making resource unclaimed.">Reset</button>
                        }
                        <!--
                        @if (Model.SubscriptionData.ManagementLevel == SubscriptionManagementLevel.ManualDelete && item.Expired)
                        {
                                        @Html.ActionLink("Delete", "Delete",
                                     new { SubscriptionId = item.SubscriptionId, resourceId = item.Id },
                                     new { @class = "btn btn-danger btn-xs wait-crs" })
                        }
                        -->
                    </td>
                </tr>
            }
        </tbody>
    </table>

<div id="descriptionDialog" class="modal fade">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
           <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
             <h4 class="modal-title">Resource description</h4>
            </div>
            <div class="modal-body">
                <table>
                    <tr style="display:none">
                        <td colspan="3"><div id="resourceId"></div></td>
                        </tr>
                    <tr>
                        <td>Name</td>
                        <td width="5px" />  
                        <td id="resourceName"></td>
                    </tr>
                    <tr>
                        <td style="vertical-align:top;text-align:justify;white-space:normal;margin:5px">Description</td>
                        <td width="5px" />
                        <td style="padding:0px;vertical-align:top;text-align:left"><textarea id="resourceDescription" style="text-align:left;vertical-align:top;margin:5px;width:500px;height:250px;"></textarea></td>
                    </tr>
                            </table>
            </div>
                   <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="OnSaveDescription()">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
    
        </div> 
    </div>
</div>
    

